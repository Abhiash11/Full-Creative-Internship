Wrapper Class
	The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive. Since J2SE 5.0, autoboxing and unboxing feature convert primitives into objects and objects into primitives automatically. The automatic conversion of primitive into an object is known as autoboxing and vice-versa unboxing. Basically, generic classes only work with objects and don't support primitives. As a result, if we want to work with them, we have to convert primitive values into wrapper objects.

Uses of Wrapper class:
  --> Java supports only call by value. So if primitive value is passed, it will not change the original value. But if converted to an object, it will do so. 
  --> Java collection framework works with objects only.
  --> Concepts of serialization and synchronization in Java deal with objects. So there it is helpful to convert primitive types to object.
  --> We can store null value in wrapper objects.

The eight classes of java.lang package listed below are known as wrapper class.


Primitive Type
Wrapper class
boolean
Boolean
char
Character
byte
Byte
short
Short
int
Integer
long
Long
float
Float
double
Double

Autoboxing: The automatic conversion of primitive datatype to its corresponding wrapper class is known as autoboxing. For example, byte to Byte, char to Character, int to Integer, long to Long, float to Float, etc. 

Example:
	package week2;
	public class Wrapper1 {
	public static void main(String[] args) {
	// create primitive types
	int a = 5;
	double b = 5.65;
	//converts into wrapper objects
	Integer aObj = Integer.valueOf(a);
	Double bObj = Double.valueOf(b);
	System.out.println(a+ " \n"+b);
}}
Output:
	5
	5.65
In the above example, we have used the valueOf() method to convert the primitive types into objects. However, the Java compiler can directly convert the primitive types into corresponding objects. For example, 
	
	package week2;
	public class Wrapper1 {
	public static void main(String[] args) {
	// create primitive types
	int a = 5;
	double b = 5.65;
	//converts into wrapper objects
	Integer aObj =a;
	Double bObj = b;
	System.out.println(a+ " \n"+b);
}}
Output:
	5
	5.65

Unboxing: The automatic conversion of wrapper type into its corresponding primitive type is known as unboxing. It is the reverse process of autoboxing. 
Example:
	class Wrapper2{
		public static void main(String[] args) {
// creates objects of wrapper class
		Integer aObj = Integer.valueOf(21);
		Double bObj = Double.valueOf(5.3);
// converts into primitive types
		int a = aObj.intValue();
		double b = bObj.doubleValue();
		System.out.println("The value of a: " + a);
		System.out.println("The value of b: " + b);
}}
Output:
	The value of a: 21
	The value of b: 5.3


In the above example, we have used the intValue() and doubleValue() method to convert the Integer and Double objects into corresponding primitive types. However, the Java compiler can automatically convert objects into corresponding primitive types. For example:
	package week2;
	class Wrapper2 {
	public static void main(String[] args) {
	// creates objects of wrapper class
	Integer aObj = Integer.valueOf(16);
	Double bObj = Double.valueOf(7.46);
// converts into primitive types
	int a = aObj;
	double b = bObj;
	System.out.println("The value of a: " + a);
	System.out.println("The value of b: " + b);
}}
Output:
	The value of a: 16
	The value of b: 7.46

Example3:
	package week2;
	public class Wrapper3 {
	public static void main(String[] args) {
	byte b=10; 
	short s=20; 
	int i=30; 
	long l=40; 
	float f=50.0F; 
	double d=60.0D; 
	char c='a'; 
	boolean b2=true; 
//Autoboxing: Converting primitives into objects 
	Byte bobj=b; 
	Short sobj=s; 
	Integer iobj=i; 
	Long lobj=l; 
	Float fobj=f; 
	Double dobj=d; 
	Character cobj=c; 
	Boolean boolobj=b2; 
//Printing objects 
	System.out.println("---Printing object values---"); 
	System.out.println("Byte object: "+bobj); 
	System.out.println("Short object: "+sobj); 
	System.out.println("Integer object: "+iobj); 
	System.out.println("Long object: "+lobj); 
	System.out.println("Float object: "+fobj); 
	System.out.println("Double object: "+dobj); 
	System.out.println("Character object: "+cobj); 
	System.out.println("Boolean object: "+boolobj); 
//Unboxing: Converting Objects to Primitives 
	byte bytevalue=bobj; 
	short shortvalue=sobj; 
	int intvalue=iobj; 
	long longvalue=lobj; 
	float floatvalue=fobj; 
	double doublevalue=dobj; 
	char charvalue=cobj; 
	boolean boolvalue=boolobj; 
//Printing primitives 
	System.out.println("---Printing primitive values---"); 
	System.out.println("byte value: "+bytevalue); 
	System.out.println("short value: "+shortvalue); 
	System.out.println("int value: "+intvalue); 
	System.out.println("long value: "+longvalue); 
	System.out.println("float value: "+floatvalue); 
	System.out.println("double value: "+doublevalue); 
	System.out.println("char value: "+charvalue); 
	System.out.println("boolean value: "+boolvalue); 
}}

Output;
	---Printing object values---
	Byte object: 10
	Short object: 20
	Integer object: 30
	Long object: 40
	Float object: 50.0
	Double object: 60.0
	Character object: a
	Boolean object: true
	---Printing primitive values---
	byte value: 10
	short value: 20
	int value: 30
	long value: 40
	float value: 50.0
	double value: 60.0
	char value: a
	boolean value: true





